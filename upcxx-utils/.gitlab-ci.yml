variables:
  GIT_STRATEGY: fetch
  REGISTRY: registry.gitlab.com
  APPLICATION: upcxx_utils
  TEST_IMAGE: $REGISTRY/$REGISTRY_USER/$APPLICATION:latest
  RELEASE_IMAGE: $REGISTRY/$REGISTRY_USER/$APPLICATION:$CI_BUILD_REF_NAME
  UPCXX_VER: 2021.3.0
  UPCXX_MODULE_VER: nightly


stages:
  - build
  - validation
  - accuracy

#
# cori
#

Cori:build:
  stage: build
  tags:
    - Cori
  script:
    - set -e
    - set -x
    - git submodule init
    - git submodule sync
    - git submodule update
    - echo "Establishing variables"
    - export UPCXX_UTILS_SOURCE=$(pwd)
    - export BASE=${SCRATCH}/tmp/gitlab-runner-scratch-Cori-upcxx-utils-${USER}
    - export SCRATCH=${BASE}/upcxx-utils-${CI_COMMIT_SHORT_SHA}-${CI_COMMIT_REF_NAME}-${CI_COMMIT_TAG}
    - export INSTALL_PREFIX=${SCRATCH}/install
    - export BUILD_PREFIX=${SCRATCH}/build
    - export RUN_PREFIX=${SCRATCH}/runs
    - echo "BASE=${BASE} SCRATCH=${SCRATCH}"
    - mkdir -p ${BASE}
    - rm -rf ${SCRATCH}
    - mkdir -p ${SCRATCH} ${RUN_PREFIX}
    - exec >  >(tee -ia ${SCRATCH}/build.log)
    - exec 2> >(tee -ia ${SCRATCH}/build.err >&2)
    - uname -a
    - pwd
    - date
    - echo "Cleaning out old installs"
    - find ${BASE} -maxdepth 1  -name 'upcxx-utils-*'  -mtime +4 -type d -exec rm -rf '{}' ';' || /bin/true
    - lmstat -a -c $INTEL_LICENSE_FILE || /bin/true
    - echo "Loading GNU KNL modules for upcxx on cori"
    - export BUILD_NAME=knl-gnu
    - module rm PrgEnv-intel
    - module rm PrgEnv-cray
    - module load PrgEnv-gnu
    - module rm craype-haswell
    - module load craype-mic-knl
    - module load cmake
    - module load git
    - module load upcxx/${UPCXX_MODULE_VER}
    - module list
    - export UPCXX_UTILS_BUILD=${BUILD_PREFIX}-${BUILD_NAME}-dbg
    - mkdir -p ${UPCXX_UTILS_BUILD}
    - cd $UPCXX_UTILS_BUILD
    - echo "Building Debug version of ${BUILD_NAME}"
    - cmake -DCMAKE_INSTALL_PREFIX=${INSTALL_PREFIX}-${BUILD_NAME}-dbg -DCMAKE_BUILD_TYPE=Debug ${UPCXX_UTILS_SOURCE}
    - make -j 8 install
    - export UPCXX_UTILS_BUILD=${BUILD_PREFIX}-${BUILD_NAME}-relwithdebinfo
    - mkdir -p ${UPCXX_UTILS_BUILD}
    - cd $UPCXX_UTILS_BUILD
    - echo "Building RelWithDebInfo version of ${BUILD_NAME}"
    - cmake -DCMAKE_INSTALL_PREFIX=${INSTALL_PREFIX}-${BUILD_NAME}-relwithdebinfo -DCMAKE_BUILD_TYPE=RelWithDebInfo ${UPCXX_UTILS_SOURCE}
    - make -j 8 install
    - export UPCXX_UTILS_BUILD=${BUILD_PREFIX}-${BUILD_NAME}
    - mkdir -p ${UPCXX_UTILS_BUILD}
    - cd $UPCXX_UTILS_BUILD
    - echo "Building Release version of ${BUILD_NAME}"
    - cmake -DCMAKE_INSTALL_PREFIX=${INSTALL_PREFIX}-${BUILD_NAME} -DCMAKE_BUILD_TYPE=Release ${UPCXX_UTILS_SOURCE}
    - make -j 8 install
    - echo "Loading Intel KNL modules for upcxx on cori"
    - export BUILD_NAME=knl-intel
    - module rm PrgEnv-gnu
    - module load PrgEnv-intel
    - module list
    - export UPCXX_UTILS_BUILD=${BUILD_PREFIX}-${BUILD_NAME}-dbg
    - mkdir -p ${UPCXX_UTILS_BUILD}
    - cd $UPCXX_UTILS_BUILD
    - echo "Building Debug version of ${BUILD_NAME}"
    - cmake -DCMAKE_INSTALL_PREFIX=${INSTALL_PREFIX}-${BUILD_NAME}-dbg -DCMAKE_BUILD_TYPE=Debug ${UPCXX_UTILS_SOURCE}
    - make -j 8 install
    - export UPCXX_UTILS_BUILD=${BUILD_PREFIX}-${BUILD_NAME}-relwithdebinfo
    - mkdir -p ${UPCXX_UTILS_BUILD}
    - cd $UPCXX_UTILS_BUILD
    - echo "Building RelWithDebInfo version of ${BUILD_NAME}"
    - cmake -DCMAKE_INSTALL_PREFIX=${INSTALL_PREFIX}-${BUILD_NAME}-relwithdebinfo -DCMAKE_BUILD_TYPE=RelWithDebInfo ${UPCXX_UTILS_SOURCE}
    - make -j 8 install
    - export UPCXX_UTILS_BUILD=${BUILD_PREFIX}-${BUILD_NAME}
    - mkdir -p ${UPCXX_UTILS_BUILD}
    - cd $UPCXX_UTILS_BUILD
    - echo "Building Release version of ${BUILD_NAME}"
    - cmake -DCMAKE_INSTALL_PREFIX=${INSTALL_PREFIX}-${BUILD_NAME} -DCMAKE_BUILD_TYPE=Release ${UPCXX_UTILS_SOURCE}
    - make -j 8 install
    - echo "Loading GNU Haswell modules for upcxx"
    - export BUILD_NAME=haswell-gnu
    - module rm PrgEnv-intel
    - module load PrgEnv-gnu
    - module rm craype-mic-knl
    - module load craype-haswell
    - module swap upcxx/${UPCXX_MODULE_VER}
    - module list
    - export UPCXX_UTILS_BUILD=${BUILD_PREFIX}-${BUILD_NAME}
    - mkdir -p ${UPCXX_UTILS_BUILD}
    - cd $UPCXX_UTILS_BUILD
    - echo "Building Release version of ${BUILD_NAME}"
    - cmake -DCMAKE_INSTALL_PREFIX=${INSTALL_PREFIX}-${BUILD_NAME} -DCMAKE_BUILD_TYPE=Release ${UPCXX_UTILS_SOURCE}
    - make -j 8 install
# disable cray compiler builds until SIGBUS errors can be resolved
#    - echo "Building using cray compilers on knl"
#    - module rm PrgEnv-intel
#    - module load PrgEnv-cray
#    - module swap upcxx/${UPCXX_MODULE_VER}
#    - module list
#    - export UPCXX_UTILS_BUILD=${BUILD_PREFIX}-knl-cray-dbg
#    - mkdir -p ${UPCXX_UTILS_BUILD}
#    - cd $UPCXX_UTILS_BUILD
#    - CXX=CC cmake -DCMAKE_INSTALL_PREFIX=${INSTALL_PREFIX}-knl-cray-dbg -DCMAKE_BUILD_TYPE=Debug ${UPCXX_UTILS_SOURCE}
#    - make -j 8 install
#    - export UPCXX_UTILS_BUILD=${BUILD_PREFIX}-knl-cray
#    - mkdir -p ${UPCXX_UTILS_BUILD}
#    - cd $UPCXX_UTILS_BUILD
#    - CXX=CC cmake -DCMAKE_INSTALL_PREFIX=${INSTALL_PREFIX}-knl-cray -DCMAKE_BUILD_TYPE=Release ${UPCXX_UTILS_SOURCE}
#    - make -j 8 install
    - echo "Done building"

Cori:validation:
  stage: validation
  tags:
    - Cori
  script:
    - set -e
    - set -x
    - export GASNET_BACKTRACE=1
    - echo "Establishing variables"
    - export UPCXX_UTILS_SOURCE=$(pwd)
    - export BASE=${SCRATCH}/tmp/gitlab-runner-scratch-Cori-upcxx-utils-${USER}
    - export SCRATCH=${BASE}/upcxx-utils-${CI_COMMIT_SHORT_SHA}-${CI_COMMIT_REF_NAME}-${CI_COMMIT_TAG}
    - export INSTALL_PREFIX=${SCRATCH}/install
    - export BUILD_PREFIX=${SCRATCH}/build
    - export RUN_PREFIX=${SCRATCH}/runs
    - exec >  >(tee -ia ${SCRATCH}/validation.log)
    - exec 2> >(tee -ia ${SCRATCH}/validation.err >&2)
    - uname -a
    - pwd
    - date
    - echo "BASE=${BASE} SCRATCH=${SCRATCH}"
    - echo "Loading KNL modules for upcxx on cori"
    - module rm PrgEnv-intel
    - module rm PrgEnv-cray
    - module load PrgEnv-gnu
    - module rm craype-haswell
    - module load craype-mic-knl
    - module load cmake
    - module load upcxx/${UPCXX_MODULE_VER}
    - module list
    - cd $SCRATCH
    - inst=${INSTALL_PREFIX}-knl
    - echo "no cray builds to test"
    - echo "Testing builds on KNL - $inst - full for knl-gnu-dbg and combined for knl-intel-dbg, knl-gnu, knl-intel"
    - knl_job=$(sbatch --parsable --job-name="CIuuv-${CI_COMMIT_SHORT_SHA}" --account=mp215 -C knl --nodes=1  --qos=debug --time=30:00 --wrap="set -e; set -x; module list; cd ${BUILD_PREFIX}-knl-gnu-dbg && ctest -R test_combined && module rm PrgEnv-gnu && module load PrgEnv-intel && module list && cd ${BUILD_PREFIX}-knl-intel-relwithdebinfo && ctest -R test_combined && echo Good")
    - echo "Waiting for knl job $knl_job"
    - date
    - while /bin/true ; do sleep 120 ; date ; sacct=$(sacct -j $knl_job -o state -X -n 2>/dev/null || true) ; if [ -n "${sacct}" -a -z "$(echo "${sacct}" | grep ING)" ] ; then break ; fi ; done
    - echo "sacct $sacct"
    - sacct=$(sacct -j $knl_job -X -n)
    - echo "sacct $sacct"
    - cat slurm-${knl_job}.out
    - wasgood=$(echo "${sacct}" | grep -v '0:0' || true)
    - if [ -z "$wasgood" ] ; then  true ; else  echo "knl job ${knl_job} failed somehow - ${wasgood}"; for spam in $(seq 1 300) ; do echo "flush output $spam" ; done; false ; fi
    - echo "Completed"

Cori:accuracy:
  stage: accuracy
  tags:
    - Cori
  script:
    - set -e
    - set -x
    - export GASNET_BACKTRACE=1
    - echo "Establishing variables"
    - export UPCXX_UTILS_SOURCE=$(pwd)
    - export BASE=${SCRATCH}/tmp/gitlab-runner-scratch-Cori-upcxx-utils-${USER}
    - export SCRATCH=${BASE}/upcxx-utils-${CI_COMMIT_SHORT_SHA}-${CI_COMMIT_REF_NAME}-${CI_COMMIT_TAG}
    - export INSTALL_PREFIX=${SCRATCH}/install
    - export BUILD_PREFIX=${SCRATCH}/build
    - export RUN_PREFIX=${SCRATCH}/runs
    - exec >  >(tee -ia ${SCRATCH}/accuracy.log)
    - exec 2> >(tee -ia ${SCRATCH}/accuracy.err >&2)
    - uname -a
    - pwd
    - date
    - echo "BASE=${BASE} SCRATCH=${SCRATCH}"
    - echo "Loading KNL modules for upcxx on cori"
    - module rm PrgEnv-intel
    - module rm PrgEnv-cray
    - module load PrgEnv-gnu
    - module rm craype-haswell
    - module load craype-mic-knl
    - module load cmake
    - module load upcxx/${UPCXX_MODULE_VER}
    - cd $SCRATCH
    - echo "Testing accuracy"
    - inst=${INSTALL_PREFIX}-knl
    - knl_job=$(sbatch --parsable --job-name="CIuua-${CI_COMMIT_SHA}" --account=mp215 -C knl --nodes=2  --qos=debug --time=30:00 --wrap="set -e; set -x; module list; $inst-gnu-relwithdebinfo/test/bin/spawn_tests.sh $inst-gnu-relwithdebinfo && module rm PrgEnv-gnu && module load PrgEnv-intel && module list && $inst-intel-relwithdebinfo/test/bin/spawn_tests.sh $inst-intel-relwithdebinfo && echo Good")
    - echo "Waiting for knl job $knl_job"
    - date
    - while /bin/true ; do sleep 120 ; date ; sacct=$(sacct -j $knl_job -o state -X -n 2>/dev/null || true) ; if [ -n "${sacct}" -a -z "$(echo "${sacct}" | grep ING)" ] ; then break ; fi ; done
    - sacct=$(sacct -j $knl_job -X -n)
    - echo "$sacct"
    - cat slurm-${knl_job}.out
    - wasgood=$(echo "${sacct}" | grep -v '0:0' || true)
    - if [ -z "$wasgood" ] ; then  true ; else  echo "knl job ${knl_job} failed somehow - ${wasgood}"; for spam in $(seq 1 300) ; do echo "flush output $spam" ; done; false ; fi
    - echo "Completed"


#
# hulk
#

HULK:build:
  stage: build
  tags:
    - HULK
  script:
    - set -e
    - set -x
    - git submodule init
    - git submodule sync
    - git submodule update
    - BASE=/work/gitlab-ci
    - export UPCXXVER=${UPCXX_VER}
    - CI_INSTALL=$BASE/ci-install-upcxx-${UPCXXVER}
    - export PATH=$CI_INSTALL/bin:/bin:/usr/bin:/usr/local/bin
    - export HIPMER_DATA=${BASE}/scratch/
    - export SCRATCH=${BASE}/scratch/upcxx-utils-${CI_COMMIT_SHORT_SHA}-${CI_COMMIT_REF_NAME}-${CI_COMMIT_TAG}
    - echo "Establishing all tests under BASE=$BASE and SCRATCH=$SCRATCH"
    - rm -rf ${SCRATCH}
    - mkdir -p ${SCRATCH}
    - exec >  >(tee -ia $SCRATCH/build.log)
    - exec 2> >(tee -ia $SCRATCH/build.err >&2)
    - export UPCXX_UTILS_SOURCE=$(pwd)
    - env
    - uname -a
    - pwd
    - find * -type d -ls
    - date
    - echo "Purging any old tests"
    - ls -td ${BASE}/scratch/upcxx-utils-inst-* | tail -n +8 | xargs  rm -rf '{}' ';' || /bin/true
    - df -h
    - echo "Checking for cmake, Berkeley UPC and UPC++"
    - which cmake && cmake --version
    - which upcxx || ./contrib/install_upcxx.sh $CI_INSTALL
    - upcxx --version
    - FAILED=""
    - echo "Building all flavors"
    - mkdir -p ${SCRATCH}/runs
    - export GASNET_BACKTRACE=1
    - export INSTALL_PREFIX=${SCRATCH}
    - echo "Building debug"
    - mkdir -p $SCRATCH/build-dbg $SCRATCH/build-rel $SCRATCH/build-rwdi $SCRATCH/build-rwd-nothreads
    - cd $SCRATCH/build-dbg
    - cmake -DCMAKE_INSTALL_PREFIX=${INSTALL_PREFIX}/upcxx-utils-dbg -DCMAKE_BUILD_TYPE=Debug ${UPCXX_UTILS_SOURCE} || FAILED="${FAILED} could not configure debug"
    - make -j 16 all install || FAILED="${FAILED} could not build debug"
    - cd $SCRATCH/build-rel
    - cmake -DCMAKE_INSTALL_PREFIX=${INSTALL_PREFIX}/upcxx-utils-rel -DCMAKE_BUILD_TYPE=Release ${UPCXX_UTILS_SOURCE} || FAILED="${FAILED} could not configure rel"
    - make -j 16 all install || FAILED="${FAILED} could not build rel"
    - cd $SCRATCH/build-rwdi
    - export UPCXX_CODEMODE=debug
    - cmake -DCMAKE_INSTALL_PREFIX=${INSTALL_PREFIX}/upcxx-utils-rwdi -DCMAKE_BUILD_TYPE=RelWithDebInfo ${UPCXX_UTILS_SOURCE} || FAILED="${FAILED} could not configure rwdi"
    - make -j 16 all install || FAILED="${FAILED} could not build rwdi"
    - cd $SCRATCH/build-rwd-nothreads
    - cmake -DCMAKE_INSTALL_PREFIX=${INSTALL_PREFIX}/upcxx-utils-rwd-nothreads -DCMAKE_BUILD_TYPE=RelWithDebug -DUPCXX_UTILS_NO_THREADS=ON ${UPCXX_UTILS_SOURCE} || FAILED="${FAILED} could not configure rwd-nothreads"
    - make -j 16 all install || FAILED="${FAILED} could not build rwd-nothreads"
    - echo "Testing rwd-nothreads"
    - cd $SCRATCH/build-rwd-nothreads
    - make test || FAILED="${FAILED} could not test rwd-nothreads"
    - echo "Testing rwdi"
    - cd $SCRATCH/build-rwdi
    - make test || FAILED="${FAILED} could not test rwdi"
    - echo "Testing rel"
    - cd $SCRATCH/build-rel
    - make test || FAILED="${FAILED} could not test rel"
    - echo "Testing dbg"
    - cd $SCRATCH/build-dbg
    - make test || FAILED="${FAILED} could not test dbg"
    - echo "Done with tests"
    - if [ -z "$FAILED" ] ; then  true ; else echo "Something failed somehow - ${FAILED}"; for spam in $(seq 1 100) ; do echo "flush output $spam" ; done ; false ; fi
    - cd -
    - echo "Completed"


HULK:validation:
  stage: validation
  tags:
    - HULK
  script:
    - set -e
    - set -x
    - BASE=/work/gitlab-ci
    - export UPCXXVER=${UPCXX_VER}
    - CI_INSTALL=$BASE/ci-install-upcxx-${UPCXXVER}
    - export PATH=$CI_INSTALL/bin:/bin:/usr/bin:/usr/local/bin
    - export HIPMER_DATA=${BASE}/scratch/
    - export SCRATCH=${BASE}/scratch/upcxx-utils-${CI_COMMIT_SHORT_SHA}-${CI_COMMIT_REF_NAME}-${CI_COMMIT_TAG}
    - exec >  >(tee -ia ${SCRATCH}/validation.log)
    - exec 2> >(tee -ia ${SCRATCH}/validation.err >&2)
    - echo "Validating all tests under BASE=$BASE and SCRATCH=$SCRATCH"
    - env
    - df -h
    - uname -a
    - pwd
    - date
    - upcxx --version
    - echo "Completed"

HULK:accuracy:
  stage: accuracy
  tags:
    - HULK
  script:
    - set -e
    - set -x
    - git submodule init
    - git submodule sync
    - git submodule update
    - BASE=/work/gitlab-ci
    - export UPCXXVER=${UPCXX_VER}
    - CI_INSTALL=$BASE/ci-install-upcxx-${UPCXXVER}
    - export PATH=$CI_INSTALL/bin:/bin:/usr/bin:/usr/local/bin
    - export HIPMER_DATA=${BASE}/scratch/
    - export SCRATCH=${BASE}/scratch/upcxx-utils-${CI_COMMIT_SHORT_SHA}-${CI_COMMIT_REF_NAME}-${CI_COMMIT_TAG}
    - exec >  >(tee -ia ${SCRATCH}/accuracy.log)
    - exec 2> >(tee -ia ${SCRATCH}/accuracy.err >&2)
    - echo "Running accuracy tests under BASE=$BASE and SCRATCH=$SCRATCH"
    - env
    - df -h
    - uname -a
    - pwd
    - date
    - upcxx --version
    - echo "Completed"

after_script:
  - echo "Done"

